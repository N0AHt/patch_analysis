'''
Utilities for patch clamp loading and analysis from labview/axon setup
'''

import pandas as pd
import numpy as np

def extract_data_and_metadata(csv_file_path: str) -> tuple[pd.DataFrame, pd.DataFrame]:
    '''
    Take a csv file generated by labview and parse it into data, and metadata.
    returns a tuple of two dataframes, one containing metadata for the recording the other with the recording

    :param csv_file_path: path to the voltage or current .csv recording file
    :return: tuple of pandas data frames
    '''

    data = pd.read_csv(csv_file_path, skiprows=5, header=None)

    metadata = pd.read_csv(csv_file_path, sep=':', header=None, nrows=3, index_col=False)
    metadata.index = ['resolution', 'num_points', 'date']
    metadata.columns = ['original_title', 'value']
    metadata = metadata.T

    return data, metadata


# there is a better way to represent this as a dataframe... One df with metadata, data, voltage, and current
# all collected and grouped by stimulation


# def make_patch_dataframe(path_to_voltage_csv: str, path_to_current_csv: str) -> pd.DataFrame:
#
#     dataV_array = pd.read_csv(path_to_voltage_csv, skiprows=5, header=None).to_numpy()
#     dataI_array = pd.read_csv(path_to_current_csv, skiprows=5, header=None).to_numpy()
#
#     '''
#     stim 0 1 2 ...
#     '''